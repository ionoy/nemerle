using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;
using System.Diagnostics;
using System.IO;

using Nemerle.Extensions;
using Nemerle.Xml;
using Nemerle.WUI.Reactive;
using System.Xml.Linq;

using Newtonsoft.Json;

namespace Nemerle.WUI.Reactive
{
  public module Utils
  {
    public ToJson(value : string) : string
    {
      def sb = Text.StringBuilder(value.Length + 2);
      _ = sb.Append(' ') // this char will replased later by '"'.
      .Append(value).Replace(<#"#>, <#""#>).Replace("\n", <#\n#>)
      .Append('"');
      
      sb[0] = '"';
      
      sb.ToString()
    }
    
    public ToJson[T](value : T) : string
    {
        JsonConvert.SerializeObject(value, JsonSerializerSettings() <- TypeNameHandling = TypeNameHandling.Objects);
    }

    public MakeAndShowPage[ViewModel](pagePath  : string, 
                                      viewModel : ViewModel, 
                                      makeView  : ViewModel -> XElement) : void
      where ViewModel: IViewModel
    {
      def path = MakePage(pagePath, viewModel, makeView);
      _ = Process.Start(path);
    }
    
    /// returns page path
    MakePage[ViewModel](pagePath : string, viewModel : ViewModel, makeView : ViewModel -> XElement) : string
      where ViewModel: IViewModel
    {
      def html = MakePageHtml(viewModel, makeView);
      File.WriteAllText(pagePath, html);
      pagePath
    }
    
    public MakePageHtml[ViewModel](viewModel : ViewModel, makeView : ViewModel -> XElement) : string
      where ViewModel: IViewModel
    {
      def testView = makeView(viewModel);            
      def script = $<#
  <script type='text/javascript'>
    /*<![CDATA[*/
    $(viewModel.GetViewModelScript())
    /*]]>*/
  </script>
      #>;
      
      testView.ToString() + script;
      /*page.SetContent("Script", script);
      
      page.ToString();*/
    }
  }
}

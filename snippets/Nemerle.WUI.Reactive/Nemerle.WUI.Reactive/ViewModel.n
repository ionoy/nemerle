using Nemerle;
using Nemerle.Collections;
using Nemerle.Compiler;
using Nemerle.Compiler.Parsetree;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Globalization;
using System.Collections.Generic;
using System.Linq;
using System.Text.RegularExpressions;
using BF = System.Reflection.BindingFlags;
using TExpr = Nemerle.Compiler.Typedtree.TExpr;

namespace Nemerle.WUI.Reactive
{
  [MacroUsage(MacroPhase.BeforeInheritance, MacroTargets.Class)]
  macro ViewModel(tb : TypeBuilder)
  {
    ViewModelImpl.DoTransformBeforeInheritance(tb, Macros.ImplicitCTX())
  }
  
  [MacroUsage(MacroPhase.BeforeTypedMembers, MacroTargets.Class)]
  macro ViewModel(tb : TypeBuilder) 
  {
    ViewModelImpl.DoTransformBeforeTypedMembers(tb, Macros.ImplicitCTX())
  }
  
  [MacroUsage(MacroPhase.WithTypedMembers, MacroTargets.Class)]
  macro ViewModel(tb : TypeBuilder) 
  {
    ViewModelImpl.DoTransform(tb, Macros.ImplicitCTX())
  }
  
  module ViewModelImpl
  {
    Ident = "  ";
    
    public DoTransformBeforeInheritance(tb : TypeBuilder, typer : Typer) : void
    {
      //assert2(false);
      Macros.DefineCTX(typer);
      def vmInterface = <[ ttype: Nemerle.WUI.Reactive.IViewModel ]>;
      def superTypes = tb.GetDirectSuperTypes();
      
      unless (superTypes != null && superTypes.Exists(t => t.Equals(vmInterface)))
        tb.AddImplementedInterface(<[ Nemerle.WUI.Reactive.IViewModel ]>);
    }
    
    public DoTransformBeforeTypedMembers(tb : TypeBuilder, typer : Typer) : void
    {
      //assert2(false);
            
      def processMember(member : ClassMember) : void
      {
        | Field(ty=ty) as field =>
          match (ty)
          {            
            | _ => ()
          }
          
        | _ => ()
      }
      
      match (tb.Ast)
      {
        | TopDeclaration.Class(decls=decls) => foreach (d in decls) processMember(d)
        | _ => ()
      }
    }
    
    public DoTransform(tb : TypeBuilder, typer : Typer) : void
    {            
      Macros.DefineCTX(typer);
      
      def serverClass = tb.DeclaredNestedTypes.FirstOrDefault(t => t.Name == "Server");
      def serverMethods = Dictionary();
      when(serverClass != null)
      {          
          def env = typer.Manager.CoreEnv;
          def env = env.EnterIntoNamespace(tb.NamespaceNode);
          def controllerName = tb.Name + "Controller";
          def field = <[ decl: _server : $(serverClass.Name : usesite) = $(serverClass.Name : usesite)() ]>;          
          def ctb = env.Define(<[ decl: 
            public class $(controllerName : usesite) : System.Web.Mvc.Controller
            {}
          ]>);
          ctb.Define(field);
                 
          def ptb = tb.DefineNestedType(<[ decl:
              class ServerProxy
              {}
          ]>);          
          tb.Define(<[ decl: server : ServerProxy = ServerProxy() ]>);
          
          foreach(member in serverClass.GetMembers()) {
              | method is IMethod when !method.IsConstructor && method.DeclaringType.FullName == serverClass.FullName => 
                  def parameters = method.GetParameters().Map(p => <[ $(p.Name : usesite) : $(p.ty : typed) ]>);              
                  def fparms = parameters.Map(PParameter);
                  def methodName = ctb.ParsedName.NewName(method.Name);
                            
                  ctb.Define(<[ decl: 
                    public $(methodName : name) (..$fparms) : System.Web.Mvc.JsonResult 
                    {
                        def result = _server.$(method.Name : dyn)(..$parameters);
                        Json(result, System.Web.Mvc.JsonRequestBehavior.AllowGet);
                    }
                  ]>);
                  
                  serverMethods.Add(method.Name, fparms);
                  def fparms = fparms.Append([<[ parameter: callback : int -> void ]>]);
                  
                  ptb.Define(<[ decl:                   
                    public $(methodName : name) (..$(fparms)) : void
                    {}
                  ]>);
              | _ => ()              
          }
          
          ptb.Compile();
          ctb.Compile();
      }
      
      def convertMethod(type : TypeInfo, name : string, meth : MethodBuilder, isDependent = true)
      {       
        def scriptBody = TranslateMethodBody(typer, type, meth);                
        def code = if (isDependent)
$<#
this.$name = ko.computed(function() {
    $scriptBody;
}, this);#>
        else {
            def parms = meth.GetParameters().Map(p => p.Name);
$<#
this.$name = function(..$parms) {
    $scriptBody;
};#>;
        }
        
        code
      }
            
      def convertMember(member : IMember)
      {
        | meth is MethodBuilder when meth.Name.StartsWith("get_") || meth.Name.StartsWith("set_") => null //TODO: Add property IMethod.IsAccessor
        | meth is MethodBuilder when meth.IsConstructor => null
        | meth is MethodBuilder => convertMethod(member.DeclaringType, meth.Name, meth, false)
        | prop is PropertyBuilder when prop.AutoPropertyField.IsSome =>          
          def arrayTypes = [<[ ttype: Nemerle.Core.list[_] ]>, <[ ttype: System.Collections.Generic.List[_] ]>];          
          def isArray = arrayTypes.Any(t => prop.Getter.ReturnType.TryUnify(t));
          def ctor = if (isArray) "observableArray([])" else "observable()";
          $<#this.$(prop.Name) = ko.$ctor;#>;
          //def paramName = char.ToLower(prop.Name[0]) + prop.Name.Substring(1);
        | prop is PropertyBuilder when prop.CanRead && !prop.CanWrite => convertMethod(member.DeclaringType, prop.Name, prop.GetGetter() :> MethodBuilder)
        | _ =>  null          
      } 
      //assert2(false);
      def createJsTypeBody(type: TypeInfo) {
          //assert2(false);
          def members = type.GetMembers(BF.DeclaredOnly | BF.Instance | BF.Public | BF.NonPublic);
          def exprs1 = members.RevMap(convertMember).RevFilter(_ != null);
          
          def constructor = GetTypeConstructor(type);
          def constructorParams = if(constructor != null) constructor.GetParameters().Map(p => p.Name) else [];                          
          def constructorBody = TranslateMethodBody(typer, type, constructor :> MethodBuilder);
          
          def ctor = constructor :> MethodBuilder;
          def addParams(parms, expr) : PExpr {
              match(parms) {
              | head :: tail => 
                def newExpr = <[ $expr; __constructorParams.Add($(head : dyn)); ]>;
                addParams(tail, newExpr);                
              | [] => expr
              }              
          }          
          
          def assignments = addParams(constructorParams, ctor.Body);
          ctor.Body = <[ $assignments ]>;          
          
          def tb = type :> TypeBuilder;
          tb.Define(<[ decl: __constructorParams : List[object] = List.[object]() ]>);
          tb.Compile();
          
          def header = $<# function $(type.Name)(..$(constructorParams)) { #>;          
          def body = $<# ..$(exprs1; "\n") #>;
          def footer = <# }; #>;
          
          $<#
            $header
            $body
            $constructorBody
            $footer
          #>
      }
      
      //assert2(false);
      def vmTypeBody  = createJsTypeBody(tb);
      def otherTypeBodies = tb.GetNestedTypes(BF.Public|BF.NonPublic|BF.Instance)
                              .Filter(t => t.Name != "Server")
                              .Map(t => <[ sb.AppendLine($(createJsTypeBody(t))) ]>);                              
        
      def toTypedObjectFunction = 
<#
function ToTypedObject(obj) {
    if(!!obj.$type) {
        var typename = obj.$type.replace(/.*\+(.+),.+/, "$1");
        var params = [];
        for(var p in obj)
            if(obj.hasOwnProperty(p)) {
                params.push('ToTypedObject(obj.' + p + ')');
            }
        return eval('new ' + typename + '(' + params.slice(1).join() + ')');
    }               
    if(obj instanceof Array) {
        var newArr = [];
        for (var i=0, l = obj.length; i < l; newArr.push(ToTypedObject(obj[i++])));
        return newArr;
    }
    return obj;
};
#>;
      def applyBindings = 
$<#    
    ko.applyBindings(new $(tb.Name)({0}));
#>;
      _ = tb.DefineWithSource(<[ decl:
        public GetViewModelScript() : string
        {
          def sb = System.Text.StringBuilder();
          _ = sb.AppendLine($toTypedObjectFunction);
          { ..$otherTypeBodies }
          _ = sb.AppendLine($vmTypeBody);          
          def paramList = __constructorParams.Map(obj => "ToTypedObject(" + Utils.ToJson(obj) + ")");          
          _ = sb.AppendLine(string.Format($applyBindings, $"..$(paramList)"));
          sb.ToString()
        }
        ]>);
        
      
      /*
      
      //assert2(false);
      def members = tb.GetMembers(BF.DeclaredOnly | BF.Instance | BF.Public | BF.NonPublic);
      def exprs1 = members.RevMap(convertMember).RevFilter(_ != null);
      def exprs2 = exprs1.Map(e => <[ _ = sb.AppendLine($e) ]>);
      
      _ = tb.DefineWithSource(<[ decl:
        public GetViewModelScript() : string
        {
          def sb = System.Text.StringBuilder();
          _ = sb.AppendLine("function ViewModel() { ");
          { ..$exprs2 }          
          _ = sb.AppendLine("}");
          _ = sb.AppendLine("ko.applyBindings(new ViewModel());");
          sb.ToString()
        }
        ]>);

      _ = tb.DefineWithSource(<[ decl:
        public ToJson() : string
        {
          assert2(false);
          "!!! Not implemented yet !!!"
        }
        ]>);
        
      _ = tb.DefineWithSource(<[ decl:
          protected js(function : string) : string
          {""}
        ]>);*/
    }
    
    public BuildMethod(tb : TypeBuilder, method : MethodBuilder, typer : Typer) : string {        
        def oldEmitDebug = typer.Manager.Options.EmitDebug;
        typer.Manager.Options.EmitDebug = false;
        def methodTyper = Typer(tb, null, method, method.Env);        
        methodTyper.RunFullTyping();
        typer.Manager.Options.EmitDebug = oldEmitDebug;
        
        match(method.Header.Body) { 
        | FunBody.Typed(typedBody) =>            
            mutable jsAst = JsASTBuilder.Build(typedBody, false);
            jsAst = JsASTOptimizer.LabelsToSwitch(jsAst);
            jsAst = JsASTOptimizer.Optimize(jsAst);            
            jsAst = JsASTOptimizer.FlattenAndRemoveVoids(jsAst);
            jsAst = JsASTOptimizer.RemoveEmptyBranches(jsAst);
            
            JsASTWriter.Write(jsAst); 
        | _ => Message.Error("Couldn't type body"); "// Error generating javascript, method body wasn't typed correctly";
        }
    }
    
    /// Create nested type with given properties and return name of created type.
    public MakeNestedViewModel(tb : TypeBuilder, typer : Typer, typeName : string, props : list[PExpr]) : PExpr
    {
      //assert2(false);
      typer.Manager.MacroColors.PushUseSiteColor();
      
      try
      {
        def makeProp(propDef : PExpr) : ClassMember
        {
          | <[ $(name : name) : $ty ]> => <[ decl: public $(name : name) : $ty { get; set; } ]>
          | _ => Message.FatalError(propDef.Location, "Incorrect format of property defenition. Use: Name : type")
        }
        def name = "T" + typeName;
        def props2 = props.Map(makeProp);
        
        def nested = tb.DefineNestedType(<[ decl:
          [Nemerle.Core.Record, Nemerle.WUI.Reactive.ViewModel]
          public class $(name : dyn) : Nemerle.WUI.Reactive.IViewModel
          {
            ..$props2
          }
          ]>);
          
        nested.Compile();
          
        <[  ]>
      }
      finally { typer.Manager.MacroColors.PopColor(); }
    }
    
    public TranslateMethodBody(typer : Typer, type : TypeInfo, meth : MethodBuilder) : string
    {
        #region Type method body
        def typer = typer;
        def body = meth.Body;
        def oldEmitDebug = typer.Manager.Options.EmitDebug;
        typer.Manager.Options.EmitDebug = false;        
        def tb = type :> TypeBuilder;        
        def methodTyper = Typer(tb, tb.Tenv, meth, meth.Env);        
        methodTyper.RunFullTyping();
        typer.Manager.Options.EmitDebug = oldEmitDebug;
        #endregion
        
        def translation = match(meth.Header.Body) { 
        | FunBody.Typed(typedBody) =>
            //assert2(false);
            mutable jsAst = JsASTBuilder.Build(typedBody, false);
            jsAst = JsASTOptimizer.LabelsToSwitch(jsAst);
            def jsAst' = JsASTOptimizer.Optimize(jsAst); 
            def jsAst'' = JsASTOptimizer.FlattenAndRemoveVoids(jsAst');
            mutable jsAst''' = JsASTOptimizer.RemoveEmptyBranches(jsAst'');           
            when(!(meth.Header.ReturnType is FixedType.Void()) && !meth.IsConstructor)
                jsAst''' = JsASTOptimizer.MakeReturn(jsAst''');
                
            def code = JsASTWriter.Write(jsAst''');
            
            when(!tb.Manager.IsIntelliSenseMode && false) {
                System.IO.File.WriteAllText("C:\\dev\\temp.txt", meth.Header.Body.ToString());
                System.IO.File.AppendAllText("C:\\dev\\temp.txt", Environment.NewLine + Environment.NewLine);
                System.IO.File.AppendAllText("C:\\dev\\temp.txt", code);
               _ = System.Diagnostics.Process.Start("notepad.exe", "C:\\dev\\temp.txt");
            }
            
            code
        | _ => Message.Error("Couldn't type body"); "// Error generating javascript, method body wasn't typed correctly";
        }
        
        meth.Body = body;
        
        translation
    }
    
    private GetTypeConstructor(type : TypeInfo) : IMethod
    {
        def constructors = type.GetConstructors(BF.Public | BF.Instance);
        when(constructors.Length > 1)
              Message.Error(type.Location, "Multiple constructors are not supported");  
        constructors.FirstOrDefault()
    }    
  }
}

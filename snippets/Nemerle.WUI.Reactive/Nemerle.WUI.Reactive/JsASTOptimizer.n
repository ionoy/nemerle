using Nemerle;
using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

namespace Nemerle.WUI.Reactive
{
  public module JsASTOptimizer
  { 
    public Optimize(ast : JsAST) : JsAST
    {  
        JsAST.Recurse(ast, a : JsAST => 
        match(a) { 
        | Call(OpCode("==="), something :: Literal(Bool(true)) :: []) 
        | Call(OpCode("==="), Literal(Bool(true)) :: something :: [])       => something
        | If(Call(func, something :: If(c, t, e) :: []), then, els)
        | If(Call(func, If(c, t, e) :: something :: []), then, els)         => JsAST.If(JsAST.Call(func, JsAST.Ternary(c, t, e) :: [something]), then, els)
        | If(cond, then, Undefined)                                         => JsAST.JustIf(cond, then)    
        | _ => a
        })
    }
        
    public FlattenAndRemoveVoids(ast : JsAST) : JsAST    
    {
        JsAST.Recurse(ast, a : JsAST => 
        match(a) {
        | Seq(s0) when s0.Any(e => e is JsAST.Seq)                          => 
            def r = s0.Flatten(e => 
                match(e) {
                | JsAST.Seq(xs) => xs
                | x => [x]
            });
            JsAST.Seq(r.Filter(rr => !(rr is JsAST.Void)));
        | _ => a
        });
    }
    
    public LabelsToSwitch(ast : JsAST) : JsAST 
    {
        def r = JsAST.Recurse(ast, a : JsAST => 
        match(a) {
        | Label as l => ConvertLabelToSwitch(l)
        | _ => a
        });        
        r
    }    
    
    ConvertLabelToSwitch(ast : JsAST.Label) : JsAST
    {        
        def currentLabel = $"__current$(ast.Id)";
        def currentLabelDef = JsAST.DefValue(currentLabel, JsAST.Literal(JsLiteral.Integer(ast.Id)));
        
        def ast = JsAST.Recurse(ast, a : JsAST => 
        match(a) {
        | Goto(labelId) => JsAST.Seq([JsAST.Assign(JsAST.LocalRef(currentLabel), JsAST.Literal(JsLiteral.Integer(labelId))),
                                      JsAST.Break()])
        | _ => a
        });
        
        def cases = IterateAST(ast).OfType.[JsAST.Label]().Map(l => JsAST.SwitchCase(l.Id, l.Body));
        def switch = JsAST.Switch(JsAST.LocalRef(currentLabel), cases);
        def while_ = JsAST.While(JsAST.Literal(JsLiteral.Bool(true)), switch);
        JsAST.Seq([currentLabelDef, while_]);
    }
    
    IterateAST(ast : JsAST) : IEnumerable[JsAST] 
    {
        def lst = List();
        JsAST.Recurse(ast, a => {
            lst.Add(a);
            a
        });
        lst
    }
  }
}

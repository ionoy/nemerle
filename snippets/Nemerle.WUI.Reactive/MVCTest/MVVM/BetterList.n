using Nemerle.Collections;
using Nemerle.Text;
using Nemerle.Utility;

using System;
using System.Collections.Generic;
using System.Linq;

using Nemerle.Xml;
using Nemerle.WUI.Reactive;
using System.Xml.Linq;

namespace MVCTest
{
  [Record, ViewModel]
  public class BetterListViewModel
  {
    public ItemToAdd     : string { get; set; }
    public AllItems      : list[string] { get; set; }
    public SelectedItems : list[string] { get; set; }
        /*
    public Test() : void 
    {   
        
        mutable counter = 0;
        while(counter < 10) {
            counter++;
        }
        def result = counter;
        
        
        def s = "Hello, world!";
        def result = match(s) {
        | "Nemerle is awesome!" => true
        | x when x.Length == s.Length => true
        | _ => false
        }
        def output = result;
        
    }
    */
    public class Server 
    {
        public GetTime() : string
        {
            DateTime.Now.ToLongDateString();
        }
        
        public Add(a : int, b : int) : int 
        {
            a + b
        }
    }
  }

  public partial module Views
  {
    [View()]
    public BetterListView(viewModel : BetterListViewModel) : XElement
    {
      _ = viewModel;
      xml <# 
        <div class="note" xmlns="">
          <form data-bind="submit:AddItem">
              Add item: <input type="text" data-bind='value:ItemToAdd, valueUpdate: "afterkeydown"' />
              <button type="submit" data-bind="enable: ItemToAdd().length > 0">Add</button>
          </form>
           
          <p>Your values:</p>
          <select multiple="multiple" height="5" data-bind="options:AllItems, selectedOptions:SelectedItems"> </select>
           
          <div>
              <button data-bind="click: RemoveSelected, enable: SelectedItems().length > 0">Remove</button>
              <button data-bind="click: Sort, enable: AllItems().length > 1">Sort</button>
          </div>
        </div>
      #>
    }
  }
}
